syntax = "proto3";

package browser_commands;

// Main message wrapper for all browser operations
message BrowserMessage {
  string id = 1; // Unique request ID for correlation
  oneof payload {
    Command command = 2;
    Response response = 3;
  }
}

// Command sent to browser
message Command {
  oneof action {
    GetConsoleLogsCommand get_console_logs = 1;
    ExecuteConsoleCommand execute_console = 2;
    GetScreenshotCommand get_screenshot = 3;
    GetPageContentCommand get_page_content = 4;
    NavigateCommand navigate = 5;
    ClickCommand click = 6;
    TypeCommand type = 7;
    WaitForElementCommand wait_for_element = 8;
    EvaluateJavaScriptCommand evaluate_js = 9;
    GetElementCommand get_element = 10;
    GetSimplifiedDOMCommand get_simplified_dom = 11;
  }
}

// Response from browser
message Response {
  bool success = 1;
  string error = 2;
  oneof result {
    ConsoleLogsResponse console_logs = 3;
    ConsoleExecutionResponse console_execution = 4;
    ScreenshotResponse screenshot = 5;
    PageContentResponse page_content = 6;
    NavigationResponse navigation = 7;
    ClickResponse click_result = 8;
    TypeResponse type_result = 9;
    ElementWaitResponse element_wait = 10;
    JavaScriptResponse js_result = 11;
    ElementResponse element = 12;
    SimplifiedDOMResponse simplified_dom = 13;
  }
}

// Console-related commands and responses
message GetConsoleLogsCommand {
  int32 limit = 1; // Max number of logs to return
  string level = 2; // Filter by log level (log, warn, error, info)
}

message ConsoleLogsResponse {
  repeated ConsoleLog logs = 1;
}

message ConsoleLog {
  string timestamp = 1;
  string level = 2;
  string message = 3;
  string source = 4;
  int32 line = 5;
  int32 column = 6;
}

message ExecuteConsoleCommand {
  string code = 1;
  bool return_result = 2; // Whether to return the evaluation result
}

message ConsoleExecutionResponse {
  string result = 1;
  string error = 2;
}

// Screenshot command and response
message GetScreenshotCommand {
  bool full_page = 1; // Capture full page or just viewport
  string format = 2; // png, jpeg
  int32 quality = 3; // JPEG quality (1-100)
}

message ScreenshotResponse {
  bytes image_data = 1;
  string format = 2;
  int32 width = 3;
  int32 height = 4;
}

// Page content command and response
message GetPageContentCommand {
  bool include_html = 1;
  bool include_text = 2;
  bool include_metadata = 3;
}

message PageContentResponse {
  string html = 1;
  string text = 2;
  string title = 3;
  string url = 4;
  repeated string links = 5;
  repeated string images = 6;
}

// Navigation command and response
message NavigateCommand {
  string url = 1;
  int32 timeout = 2; // Timeout in milliseconds
  bool wait_for_load = 3;
}

message NavigationResponse {
  string final_url = 1;
  string title = 2;
  bool loaded = 3;
}

// Click command and response
message ClickCommand {
  string selector = 1;
  int32 x = 2; // Optional: click at specific coordinates
  int32 y = 3;
  int32 button = 4; // 0=left, 1=middle, 2=right
  bool double_click = 5;
}

message ClickResponse {
  bool clicked = 1;
  string element_tag = 2;
}

// Type command and response
message TypeCommand {
  string selector = 1;
  string text = 2;
  bool clear_first = 3;
  int32 delay = 4; // Delay between keystrokes in ms
}

message TypeResponse {
  bool typed = 1;
  string final_value = 2;
}

// Wait for element command and response
message WaitForElementCommand {
  string selector = 1;
  int32 timeout = 2; // Timeout in milliseconds
  bool visible = 3; // Wait for element to be visible
  bool hidden = 4; // Wait for element to be hidden
}

message ElementWaitResponse {
  bool found = 1;
  bool visible = 2;
  ElementInfo element = 3;
}

// JavaScript evaluation command and response
message EvaluateJavaScriptCommand {
  string code = 1;
  bool return_by_value = 2; // Return result by value or reference
}

message JavaScriptResponse {
  string result = 1;
  string type = 2; // Result type (string, number, boolean, object, etc.)
  string error = 3;
}

// Get element command and response
message GetElementCommand {
  string selector = 1;
  bool get_all = 2; // Get all matching elements or just first
}

message ElementResponse {
  repeated ElementInfo elements = 1;
}

message ElementInfo {
  string tag_name = 1;
  string text_content = 2;
  string inner_html = 3;
  map<string, string> attributes = 4;
  BoundingBox bounding_box = 5;
  bool visible = 6;
}

message BoundingBox {
  double x = 1;
  double y = 2;
  double width = 3;
  double height = 4;
}

// Simplified DOM command and response - optimized for AI interaction
message GetSimplifiedDOMCommand {
  int32 max_depth = 1; // Maximum depth to traverse (default: 5)
  bool include_hidden = 2; // Include hidden elements (default: false)
  bool include_text_nodes = 3; // Include text content (default: true)
  bool include_coordinates = 4; // Include bounding boxes (default: true)
  repeated string focus_selectors = 5; // Focus on specific areas (optional)
}

message SimplifiedDOMResponse {
  SimplifiedDOMNode root = 1;
  int32 total_interactive_elements = 2;
  repeated string suggested_selectors = 3; // AI-friendly selectors for common actions
  string page_structure_summary = 4; // Brief description of page layout
}

message SimplifiedDOMNode {
  string tag = 1; // HTML tag name
  string role = 2; // Semantic role (button, link, input, etc.)
  string selector = 3; // CSS selector to target this element
  string text = 4; // Visible text content
  string placeholder = 5; // Placeholder text for inputs
  string value = 6; // Current value for inputs
  string type = 7; // Input type, button type, etc.
  string href = 8; // Link destination
  string id = 9; // Element ID
  repeated string classes = 10; // CSS classes
  bool interactive = 11; // Can be clicked/typed into
  bool visible = 12; // Is currently visible
  bool enabled = 13; // Is currently enabled
  BoundingBox position = 14; // Element position and size
  repeated SimplifiedDOMNode children = 15; // Child elements
  string ai_description = 16; // Human-readable description for AI
}